<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="android-dev">
  <title>Android Application Development with Maven</title>

  <section id="android-dev-sect-intro">
    <title>Introduction</title>
      <para>Android is a mobile phone and embedded device operating system developed by the Open Handset Alliance. It
        is based on a Linux kernel with a virtual machine environment for managed code application.
      </para>
      <para>
        The main application development environment is based on Java bytecode, that is transformed into dalvik
        executable code optimized for the constrained devices. Java is the default programming language and the API's
        are all Java based.
      </para>

  </section>

  <section id="android-dev-sect-config-build">
    <title>Configuring Build Environment for Android Development</title>

      <para><indexterm>
        <primary>Android</primary>

        <secondary>configuring build environment</secondary>
      </indexterm>Before you attempt to build your Android  libraries and
      applications with Maven, you will need to complete two configuration
      tasks:</para>

    <itemizedlist>
      <listitem>
        <para>Install the Android SDK </para>
      </listitem>
      <listitem>
        <para>Installing the Android API jar files into local or remote Maven repository</para>
      </listitem>
      <listitem>
        <para>Optionally configure Maven for simplified usage of the Maven Android Plugin</para>
      </listitem>
    </itemizedlist>

    <section id="android-dev-sect-sdk-install">
      <title>Installing the Android SDK</title>
      <para>The Maven Android Plugin relies on the presence of the Android SDK on the development environment and the
        ANDROID_HOME environment variable to point to the installation location. The SDK should be installed following
        the directions on the Android Developer web site at<uri>http://developer.android.com/sdk/index.html</uri>.
      </para>
      <para>In addition to the SDK itself the various platform versions or API levels should be installed as part of the
        install. Instruction for this process are located at
        <uri>http://developer.android.com/sdk/adding-components.html</uri>. Depending on the target platform version
        of the application you can install a subset of platforms or just go ahead and install all available versions.
      </para>
      <para>For the usage of the Maven Android Plugin the ANDROID_HOME environment variable needs to point to the folder
        where the SDK is installed. For example if the SDK is installed in /opt/android-sdk-linux this can be achieved with

        <command>export ANDROID_HOME=/opt/android-sdk-linux</command>
        in Unix/bash based systems or
        <command>set ANDROID_HOME=/opt/android-sdk-linux</command>
        in Windows systems.
      </para>
      <para>Optionally the path ANDROID_HOME/tools can be added to the PATH variable to allow easy command line execution
        of the various tools provided with the SDK.
      </para>
      <!-- TODO: do we need to explain that more and the environment variable stuff more
        (i hope we can assume the readers know how to do that, but maybe not) -->
    </section>

    <section id="android-dev-sect-repository-install">
      <title>Android artifact install into Maven repository</title>
      <para>
        Once the SDK is installed you will need to provide the API jar files to Maven in a repository. The
        Maven Android SDK Deployer tool allows you to do that for a single machine in a local repository as well as for
        any number of machines in a remote repository server. <!-- TODO link to nexus... in general how much do we have
        to explain here about this stuff, i would prefer to add links to the nexus book chapters somehow.. -->
      </para>
      <para>The Maven Android SDK deployer tool is available for download at
        <uri>http://github.com/mosabua/maven-android-sdk-deployer</uri>. Simply click on the
        <varname>Download Source</varname> button and extracted the downloaded zip or tar archive in a folder of your
        choice. A folder with a naming pattern of mosabua-maven-android-sdk-deployer-XXX with XXX some revision number
        like df824df will be created. Entering the sdk deployer folder with e.g.
          <command>cd mosabua-maven-android-sdk-deployer-df824df</command> readies you to install the desired artifacts.
      </para>

      <section id="android-dev-sect-repository-install-local">
        <title>Installation to local repository</title>
        <para>In order to install the android API jar files from the different platform revisions into your local
          repository you run the command
          <command>mvn clean install</command> in the deployer tool folder. By default this will upload all android.jar
        and maps.jar files into repository, which is by defaulted located in ~/.m2/repository. You should find all
        newly installed files in the <varname>android</varname> and <varname>com/google/android/maps</varname> folders.</para>
      </section>

      <section id="android-dev-sect-repository-install-remote">
        <title>Installation to remote repository</title>
        <para>The above deployment works fine for one machine, but if you need to supply a whole team of developers 
          and a cluster of build machines with the artifacts, you will want to deploy the artifacts once to a remote
          repository server that is available to all users. <!-- TODO reference nexus somehow and not do more explaining here -->
          </para>
        
        <para>As a first step you will need to edit the <varname>repo.url</varname> property in the pom.xml in the top 
          folder of the Maven Android SDK Deployer tool to point to the repository you want to publish to.</para>
        <para>Then you need to add a server with the correct access credentials for the server to your settings.xml.

        <example>
        <title>Snippet for settings.xml for the repository server access credentials</title>
        <programlisting>
&lt;settings&gt;
    &lt;servers&gt;
        &lt;server&gt;
            &lt;id&gt;android.repo&lt;/id&gt;
            &lt;username&gt;your username&lt;/username&gt;
            &lt;password&gt;your password&lt;/password&gt;
        &lt;/server&gt;
    &lt;/servers&gt;
&lt;/settings&gt;
        </programlisting>
        </example>

        Once that configuration is completed you can deploy the artifacts with the command
          <command>mvn deploy</command>. As a result you should find the artifact in the repository of your remote server.
      <!-- TODO ??
          For more information about this stuff look at the documentation for the maven-deploy-plugin.
          or better chapter bla in this book.. -->
        </para>
      </section>

      <section id="android-dev-sect-repository-install-parts">
        <title>Installation of a subset of all platforms</title>
        <para>By default the Maven Android SDK Deployer tool will attempt to install or deploy all versions of the
          platforms artifacts into a repository. If you however decided to only install a subset of the components in
        the section above <!-- TODO make it a link -->, the tool can be used with profile options to only install
        or deploy some artifacts. This can be done by specifying the platform API versions as a profile name:
        <command>mvn install -P 2.1</command>. Available profile names are <varname>1.1</varname>,
        <varname>1.5</varname>, <varname>1.6</varname>, <varname>2.0</varname> and <varname>2.1</varname>.
        </para>
      </section>

    </section>

    <section id="android-dev-sect-plugin-config">
      <title>Configuring Maven for usage of the Maven-Android-Plugin</title>
      <para>In order to use the Maven Android Plugin goals on the command line with the short plugin name
        <varname>android</varname>, you have to add the following <varname>pluginGroups</varname> snippet to your
        <varname>settings.xml</varname> file.
      </para>
      <example>
        <title>Snippet for settings.xml to enable short plugin name usage</title>
        <programlisting>
&lt;pluginGroups&gt;
   &lt;pluginGroup&gt;com.jayway.maven.plugins.android.generation2&lt;/pluginGroup&gt;
&lt;/pluginGroups&gt;
        </programlisting>
      </example>
    </section>

  </section>

  <section id="android-dev-sect-helloandroidexample">
    <title>HelloAndroid Example</title>
    <para>super simple one project setup, only display one screen in terms of code (or do a flashlight with
      color buttons or something.., show pom file for it, and commands to get it to run on the emulator and then refer
      to next chapters to see what actually happened, potentially add commandline output for build here

    code will be available at maven-android-plugin-samples project</para>


  </section>


  <section id="android-dev-sect-custom-lifecycle">
    <title>The Maven-Android-Plugin Lifecycle</title>

    <para><indexterm>
        <primary>Maven-Android-Plugin</primary>

        <secondary>lifecycle</secondary>
      </indexterm>The Android Maven plugin customizes the lifecycle based on
    the packaging. If your project has a <varname>packaging</varname> of type
    <varname>apk</varname> the Android plugin
    with execute a customized lifecycle.</para>

    

    </section>

  <section id="android-dev-sect-goals">
    <title>Android Plugin Goals</title>

    <para>
      <indexterm>
        <primary>Android</primary>

        <secondary>plugin goals</secondary>
      </indexterm>
      The Android Maven Plugin contains the following
      goals:
    </para>

    <variablelist>
      <varlistentry>
        <term>android:apk</term>
        <listitem>
          <para>The apk goal creates the android package (apk) file. By default the plugin signs the file with the debug
            keystore.  The configuration parameter sign debug false debug sign can be used to disable the signing process.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>android:deploy</term>
        <listitem>
          <para>The deploy goal deploys the built apk file, or another specified apk, to a connected device or emulator.
          This goal is automatically performed when running through the integration-test life cycle phase on a project
          with instrumentation tests (e.g. <command>mvn install</command> or <command>mvn integration-test</command>).
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>android:deploy-dependencies</term>
        <listitem>
          <para>The deploy-dependencies goal deploys all directly declared dependencies of
            <type>apk</type> in this project. This goal is usually used in a project with instrumentation tests, to
            deploy the apk to test onto the device before running the deploying and running the instrumentation tests
            apk. The goal is automatically performed when running through the integration-test life cycle phase on a project
          with instrumentation tests (e.g. <command>mvn install</command> or <command>mvn integration-test</command>).
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>android:dex</term>
        <listitem>
          <para>The dex goal converts compiled Java classes to the Android Dalivk Executable (dex) format.</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term>android:generate-sources</term>
        <listitem>
          <para>The generate-sources goal generates R.java based on the resources specified by the resources
            configuration parameter. It generates java files based on aidl files.</para>

          <para>If the configuration parameter <varname>deleteConflictingFiles</varname> is true (which it is by default),
            this goal has also deletes any R.java files found in the source directory, deletes any .java files with the
            same name as an .aidl file found in the source directory and deletes any Thumbs.db files found in the
            resource directory.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>android:instrument</term>
        <listitem>
          <para>The instrument goal runs the instrumentation android package on the device/emulator.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>android:internal-integration-test</term>

        <listitem>
          <para>The internal-integration-test goal is called automatically when the lifecycle reaches the
            integration-test phase. It determines whether to call the goal instrument in this phase based on the
            existance of instrumentation test classes in the current project. The goal is internal to the plugin
            lifecycle and should not be used as separate invocation on the command line.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>android:internal-pre-integration-test</term>

        <listitem>
          <para>The internal-pre-integration-test goal is called automatically when the lifecycle reaches
            pre-integration-test phase. It determines whether to call the goals android:deploy-dependencies and android:deploy
            in this face and if necessary invokes them. The goal is internal to the plugin lifecycle and should not be
            used as separate invocation on the command line.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>android:pull</term>
        <listitem>
          <para>The pull goal can be used to copy files or directories from the device.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>android:push</term>
        <listitem>
          <para>The pull goal can be used to copy files or directories to the device.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>android:undeploy</term>

        <listitem>
          <para>The undeploy goal removes the apk of the current project, or another specified apk, from the connected
            device.</para>
        </listitem>
      </varlistentry>
    </variablelist>

  </section>

  <section id="android-dev-sect-depdenencies">
    <title>Using external dependencies</title>
    <para> show how to declare dependencies just like normal with maven but explain the difference in what
    happens, all class files get compiled to dalvik bytecode and everything gets bundled all together into the one apk</para>
  </section>

  <section id="android-dev-sect-multimodule">
    <title>Multi Module Android Project Example</title>
    <para>
      Have a parent pom and two modules, one jar with library code, one apk with application, see how classes from
      library code end up being compiled to dalvik code in the apk project and included in the file,
    </para>

  </section>

  <section id="android-dev-sect-testing">
    <title>Using Tests</title>
    <para>
      as on above example visible, if library is normal jar any testing with sure fire can be done just like normal,
      also possible to run integration tests with apk deployed on emulator, instrumentation test examples that are
      already there, set up as separate additional module
    </para>

  </section>

  <section id="android-dev-sect-maps">
    <title>Using the Google Maps Extension</title>
    <para>just add the dependency..</para>
  </section>

  <section id="android-dev-sect-eclipse">
    <title>Using the plugin with Eclipse</title>
    <para>document what needs to be done, maybe install m2eclipse, more details on the wiki and need to play around with it
    same applies for motodev studio, http://code.google.com/p/maven-android-plugin/wiki/EclipseIntegration</para>
  </section>

  <section id="android-dev-sect-intellij">
    <title>Using the plugin with IntelliJ IDEA</title>
    <para>need to play around with it</para>
  </section>


</chapter>
